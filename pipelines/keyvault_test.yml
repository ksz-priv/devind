trigger:
- none

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'HelloWorld'

# - task: AzureKeyVault@2
#   inputs:
#     azureSubscription: $(subscriptionConnectionProd)
#     KeyVaultName: $(keyvaultName)
#     secretsFilter: '*'
#   displayName: 'Connect do KeyVault'


# - task: AzureCLI@2
#   displayName: 'KeyVault Add/Replace Secrets'
#   inputs:
#     azureSubscription: $(subscriptionConnectionProd)
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#         keyVaultName=$(keyvaultName)
#         declare -A secrets
#         secrets=( 

#           ["Name1"]="Value1" 
          
#           ["Name2"]="Value2" 
          
#           ["Name3"]="Value3" 
          
#           ["Name4"]="Value4"
          
#           ["Name5"]="Value5"
          
#           ["Name6"]="Value6"
          
#           ["Name7"]="Value7"

#           ["Name8"]="Value8"

#           )

#         for secret in "${!secrets[@]}"
#         do
#             existingSecret=$(az keyvault secret show --name $secret --vault-name $keyVaultName --query value -o tsv)
#             if [ -z "$existingSecret" ]
#             then
#                 echo "Adding secret: $secret"
#                 az keyvault secret set --name $secret --value "${secrets[$secret]}" --vault-name $keyVaultName
#             elif [ "$existingSecret" != "${secrets[$secret]}" ]
#             then
#                 echo "Updating secret: $secret"
#                 az keyvault secret set --name $secret --value "${secrets[$secret]}" --vault-name $keyVaultName
#             else
#                 echo "No changes needed for secret: $secret"
#             fi
#         done


# - task: AzureCLI@2
#   displayName: "App Configuration push values"
#   inputs:
#     azureSubscription: $(subscriptionConnectionProd)
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       KVUri="https://ksz-d-devind-kv.vault.azure.net/"
#       KVSecretNames=("Name1" "mySecret2" "Name3" "mySecret4" "Name5")
#       for KVSecretName in "${KVSecretNames[@]}"
#       do
#         KVSecret=$(az keyvault secret show --vault-name $KVUri --name $KVSecretName --query 'value' -o tsv)

#         AppConfigKey=$(AppConfigKey)

#         AppConfigUri="https://ksz-appconfiguration-test.azconfig.io"
#         az appconfig kv set --name $AppConfigKey --value $KVSecret --endpoint $AppConfigUri
#       done

- task: AzureCLI@2
  displayName: "Get Key Vault Secrets"
  inputs:
    azureSubscription: $(subscriptionConnectionProd)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      KVUri="ksz-d-devind-kv"
      KVSecretNames=("Name1" "mySecret2" "Name3" "mySecret4" "Name5")
      for KVSecretName in "${KVSecretNames[@]}"
      do
        KVSecret=$(az keyvault secret show --vault-name $KVUri --name $KVSecretName --query 'value' -o tsv)
        if [ -z "$KVSecret" ]
        then
            echo "ERROR: Unable to retrieve value for secret $KVSecretName from Key Vault"
            exit 1
        else
            echo "Retrieved secret value for $KVSecretName from Key Vault"
        fi
        echo "$KVSecretName=$KVSecret" >> $(Build.Repository.LocalPath)/kvsecrets.env
      done

- task: Bash@3
  displayName: "Set Environment Variables"
  inputs:
    targetType: 'inline'
    script: |
      envFile=$(Build.Repository.LocalPath)/kvsecrets.env
      while IFS= read -r line
      do
          export $line
      done < "$envFile"
      echo "Environment variables have been set"

- task: AzureCLI@2
  displayName: "Set App Configuration Values"
  inputs:
    azureSubscription: $(subscriptionConnectionProd)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      AppConfigKey="MyAppConfiguration"
      AppConfigUri="https://ksz-appconfiguration-test.azconfig.io"
      env | grep 'Name\|mySecret' | while read -r line; do
        IFS='=' read -r -a secrets <<< "$line"
        secretName=${secrets[0]}
        secretValue=${secrets[1]}
        az appconfig kv set --name $AppConfigKey --value "$secretValue" --key $secretName --endpoint $AppConfigUri
        if [ $? -ne 0 ]
        then
            echo "ERROR: Failed to set App Configuration value for $secretName"
            exit 1
        else
            echo "Set App Configuration value for $secretName"
        fi
      done
