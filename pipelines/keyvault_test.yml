trigger:
- none

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'HelloWorld'

# - task: AzureKeyVault@2
#   inputs:
#     azureSubscription: $(subscriptionConnectionProd)
#     KeyVaultName: $(keyvaultName)
#     secretsFilter: '*'
#   displayName: 'Connect do KeyVault'


# - task: AzureCLI@2
#   displayName: 'KeyVault Add/Replace Secrets'
#   inputs:
#     azureSubscription: $(subscriptionConnectionProd)
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#         keyVaultName=$(keyvaultName)
#         declare -A secrets
#         secrets=( 

#           ["Name1"]="Value1" 
          
#           ["Name2"]="Value2" 
          
#           ["Name3"]="Value3" 
          
#           ["Name4"]="Value4"
          
#           ["Name5"]="Value5"
          
#           ["Name6"]="Value6"
          
#           ["Name7"]="Value7"

#           ["Name8"]="Value8"

#           )

#         for secret in "${!secrets[@]}"
#         do
#             existingSecret=$(az keyvault secret show --name $secret --vault-name $keyVaultName --query value -o tsv)
#             if [ -z "$existingSecret" ]
#             then
#                 echo "Adding secret: $secret"
#                 az keyvault secret set --name $secret --value "${secrets[$secret]}" --vault-name $keyVaultName
#             elif [ "$existingSecret" != "${secrets[$secret]}" ]
#             then
#                 echo "Updating secret: $secret"
#                 az keyvault secret set --name $secret --value "${secrets[$secret]}" --vault-name $keyVaultName
#             else
#                 echo "No changes needed for secret: $secret"
#             fi
#         done


# - task: AzureCLI@2
#   displayName: "App Configuration push values"
#   inputs:
#     azureSubscription: $(subscriptionConnectionProd)
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       KVUri="ksz-d-devind-kv"
#       KVSecretNames=("Name1" "mySecret2" "Name3" "mySecret4" "Name5")
#       for KVSecretName in "${KVSecretNames[@]}"
#       do
#         KVSecret=$(az keyvault secret show --vault-name $KVUri --name $KVSecretName --query 'value' -o tsv)

#         AppConfigKey=$(AppConfigKey)

#         AppConfigUri="https://ksz-appconfiguration-test.azconfig.io"
#         az appconfig kv set --name $AppConfigKey --value $KVSecret --endpoint $AppConfigUri
#       done

# - task: AzureAppConfigurationPush@5
#   inputs:
#     azureSubscription: $(subscriptionConnectionProd)
#     AppConfigurationEndpoint: 'https://ksz-appconfiguration-test.azconfig.io'
#     ConfigurationFile: 'pipelines/appconfigurationConfig.json'
#     Separator: ','
#     Strict: false

- task: Bash@3
  displayName: 'Create App Configuration file'
  inputs:
    targetType: 'inline'
    script: |
      cd $(Build.ArtifactStagingDirectory)
      touch appconfigurationConfig.json
      echo '{' > appconfigurationConfig.json
      echo '  "smtp_port": "'"$(Smtp__Port)"'",' >> appconfigurationConfig.json
      echo '  "smtp_host": "'"$(Smtp__Host)"'",' >> appconfigurationConfig.json
      echo '  "MY_VAR_3": "'"MY_VAR_3"'",' >> appconfigurationConfig.json
      echo '  "MY_VAR_4": "'"${MY_VAR_4}"'",' >> appconfigurationConfig.json
      echo '  "MY_VAR_5": "'"${MY_VAR_5}"'"' >> appconfigurationConfig.json
      echo '}' >> appconfigurationConfig.json
      cat appconfigurationConfig.json


- task: AzureAppConfigurationPush@5
  inputs:
    azureSubscription: $(subscriptionConnectionProd)
    AppConfigurationEndpoint: 'https://ksz-appconfiguration-test.azconfig.io'
    ConfigurationFile: '$(Build.ArtifactStagingDirectory)/appconfigurationConfig.json'
    Separator: ','
    Strict: false
  displayName: 'Push configuration to Azure App Configuration'
