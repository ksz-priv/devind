trigger:
- none

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'HelloWorld'

- task: AzureKeyVault@2
  inputs:
    azureSubscription: $(subscriptionConnectionProd)
    KeyVaultName: $(keyvaultName)
    secretsFilter: '*'
  displayName: 'Connect do KeyVault'

# - task: AzureCLI@2
#   displayName: 'Petla'
#   inputs:
#     azureSubscription: $(MSDN-KSZ)
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       i=1
#       n=$(env | grep myValue | wc -l)
#       while [ $i -le $n ]
#       do
#         envVar="myValue$i"
#         secretVar="mySecretName$i"
#         secretName="${!secretVar}"
#         az keyvault secret set --vault-name $keyvaultName --name $secretName --value ${!envVar}
#         i=$((i+1))
#       done
#   env:
#     keyvaultName: $(keyvaultName)

#     myValue1: '{wartosc1}'
#     mySecretName1: 'mySecret1'

#     myValue2: '{wartosc2-zmienilasie}'
#     mySecretName2: 'mySecret2'

#     myValue3: '{wartosc3}'
#     mySecretName3: 'mySecret3'

#     myValue4: '{wartosc4}'
#     mySecretName4: 'mySecret4'

- task: AzureCLI@2
  displayName: 'Petla'
  inputs:
    azureSubscription: $(MSDN-KSZ)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      i=1
      n=$(env | grep myValue | wc -l)
      while [ $i -le $n ]
      do
        envVar="myValue$i"
        secretVar="mySecretName$i"
        secretName="${!secretVar}"
        secretValue="${!envVar}"
        existing=$(az keyvault secret show --vault-name $keyvaultName --name $secretName --query value -o tsv --only-show-errors 2>/dev/null)
        if [ -z "$existing" ]
        then
          az keyvault secret set --vault-name $keyvaultName --name $secretName --value $secretValue
        elif [ "$existing" != "$secretValue" ]
        then
          echo "Secret $secretName already exists but has a different value: $existing"
        else
          echo "Secret $secretName already exists with the same value: $existing"
        fi
        i=$((i+1))
      done
  env:
    keyvaultName: $(keyvaultName)

    myValue1: '{wartosc1}'
    mySecretName1: 'mySecret1'

    myValue2: '{wartosc2-zmienilasie}'
    mySecretName2: 'mySecret2'

    myValue3: '{wartosc3}'
    mySecretName3: 'mySecret3'

    myValue4: '{wartosc4}'
    mySecretName4: 'mySecret4'
